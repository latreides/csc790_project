#!/usr/bin/env python
from __future__ import division
import rospy
from sensor_msgs.msg import Image
from std_msgs.msg import String
from cv_bridge import CvBridge
import cv2
import numpy as np
image_converter = CvBridge()

ORANGE_BGR_UPPER = np.array((42, 165, 255), dtype='uint8')
ORANGE_BGR_LOWER = np.array((0, 25, 100), dtype='uint8')

g_orange_left_frac = 3
g_orange_right_frac = 3

def camera_callback(gz_image):
  """ Detect the color orange.
  
  rosmsg show sensor_msgs/Image
  """
  global g_orange_left_frac
  global g_orange_right_frac

  rospy.loginfo('Image is {} by {}'.format(gz_image.width, gz_image.height))
  cv_image = image_converter.imgmsg_to_cv2(gz_image, "bgr8")
  
  orange_mask = cv2.inRange(cv_image, ORANGE_BGR_LOWER, ORANGE_BGR_UPPER)
  orange_image = cv2.bitwise_and(cv_image, cv_image , mask=orange_mask)
  
  orange_left = orange_mask[:, :int(orange_mask.shape[1]/2)]
  orange_right = orange_mask[:, int(orange_mask.shape[1]/2):]

  orange_count_left = cv2.countNonZero(orange_left)
  orange_count_right = cv2.countNonZero(orange_right)
    
  g_orange_left_frac = float(orange_count_left) /  float(orange_left.size)
  g_orange_right_frac = float(orange_count_right) /  float(orange_right.size)
   

  cv2.imshow('camera', np.hstack([cv_image, orange_image]))
  cv2.waitKey(1)

def orange_detector():
  rospy.init_node('orange_detector', anonymous=True)
  rospy.Subscriber('/ros_project/camera1/image_raw', Image, camera_callback)

def run_orange_publisher():
  global g_orange_left_frac
  global g_orange_right_frac
  orange_publisher = rospy.Publisher('/ros_project/orange_frac', String, queue_size=1)
  rate = rospy.Rate(1)
  while not rospy.is_shutdown():
    orange_fracs = '{} {}'.format(g_orange_left_frac, g_orange_right_frac)
    orange_publisher.publish(orange_fracs)
    rate.sleep()

if __name__ == '__main__':
  orange_detector()
  
  try:
    run_orange_publisher()
  except rospy.ROSInterruptException:
    pass
    
    
